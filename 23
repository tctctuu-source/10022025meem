import React, { useState, useEffect } from 'react';
import { Plus, Edit, Trash2, Search, Loader2, Clipboard, Settings, Users, Trophy, Medal, Award } from 'lucide-react';
import { supabase } from '../../lib/supabase';
import { ResultPoster } from '../../types';
import ResultPosterCard from '../ResultPosterCard';

const AdminResults: React.FC = () => {
  const [posters, setPosters] = useState<ResultPoster[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [editingPoster, setEditingPoster] = useState<ResultPoster | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const defaultFormData: Omit<ResultPoster, 'id' | 'created_at'> = {
    competition_name: '',
    category: 'General',
    winner1_name: '',
    winner1_team: '',
    winner2_name: '',
    winner2_team: '',
    winner3_name: '',
    winner3_team: '',
    title_font_size: 32,
    title_color: '#082026',
    text_alignment: 'center',
    background_color: '#FFFFFF',
  };

  const [formData, setFormData] = useState(defaultFormData);

  const fetchPosters = async () => {
    setLoading(true);
    const { data, error } = await supabase.from('result_posters').select('*').order('created_at', { ascending: false });
    if (error) {
      setError("Could not fetch posters. Please check your Supabase connection.");
    } else {
      setPosters(data || []);
      setError(null);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchPosters();
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: name === 'title_font_size' ? parseInt(value, 10) : value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    const { error } = editingPoster
      ? await supabase.from('result_posters').update(formData).eq('id', editingPoster.id)
      : await supabase.from('result_posters').insert([formData]);
      
    if (error) {
      alert(`Error saving poster: ${error.message}`);
    } else {
      await fetchPosters();
      resetForm();
    }
    setIsSubmitting(false);
  };

  const resetForm = () => {
    setFormData(defaultFormData);
    setEditingPoster(null);
    setShowForm(false);
  };

  const handleEdit = (poster: ResultPoster) => {
    setEditingPoster(poster);
    setFormData({
        competition_name: poster.competition_name,
        category: poster.category,
        winner1_name: poster.winner1_name,
        winner1_team: poster.winner1_team || '',
        winner2_name: poster.winner2_name || '',
        winner2_team: poster.winner2_team || '',
        winner3_name: poster.winner3_name || '',
        winner3_team: poster.winner3_team || '',
        title_font_size: poster.title_font_size,
        title_color: poster.title_color,
        text_alignment: poster.text_alignment,
        background_color: poster.background_color,
    });
    setShowForm(true);
  };

  const handleDelete = async (id: string) => {
    if (confirm('Are you sure you want to delete this poster?')) {
      const { error } = await supabase.from('result_posters').delete().eq('id', id);
      if (error) alert(`Error deleting poster: ${error.message}`);
      else await fetchPosters();
    }
  };

  const filteredPosters = posters.filter(p =>
    p.competition_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    p.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Result Posters</h2>
          <p className="text-gray-600">Create and manage dynamic result posters</p>
        </div>
        <button onClick={() => { resetForm(); setEditingPoster(null); setShowForm(true); }} className="bg-brand-mid-blue text-white px-4 py-2 rounded-lg flex items-center gap-2">
          <Plus className="w-5 h-5" /> Add Poster
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input type="text" placeholder="Search posters..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full pl-10 pr-4 py-2 border rounded-lg" />
        </div>
      </div>

      {loading ? <div className="text-center py-8"><Loader2 className="w-6 h-6 animate-spin mx-auto" /></div> :
       error ? <div className="text-center py-8 text-rose-600">{error}</div> :
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredPosters.map(poster => (
          <div key={poster.id} className="bg-white rounded-lg shadow-md group">
            <div className="h-80"><ResultPosterCard poster={poster} /></div>
            <div className="p-4 flex justify-end space-x-2">
              <button onClick={() => handleEdit(poster)} className="p-2 text-blue-600 hover:bg-blue-100 rounded-full"><Edit size={18} /></button>
              <button onClick={() => handleDelete(poster.id)} className="p-2 text-rose-600 hover:bg-rose-100 rounded-full"><Trash2 size={18} /></button>
            </div>
          </div>
        ))}
      </div>}

      {showForm && (
        <div className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4" onClick={resetForm}>
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto" onClick={e => e.stopPropagation()}>
            <h3 className="text-xl font-bold mb-6">{editingPoster ? 'Edit' : 'Create'} Result Poster</h3>
            <form onSubmit={handleSubmit} className="space-y-6">
              <fieldset className="border p-4 rounded-lg">
                <legend className="px-2 font-semibold flex items-center gap-2"><Clipboard size={18} /> Competition Info</legend>
                <div className="grid md:grid-cols-2 gap-4 mt-2">
                  <input name="competition_name" value={formData.competition_name} onChange={handleInputChange} placeholder="Competition Name" className="p-2 border rounded-md" required />
                  <input name="category" value={formData.category} onChange={handleInputChange} placeholder="Category (e.g., General)" className="p-2 border rounded-md" required />
                </div>
              </fieldset>

              <fieldset className="border p-4 rounded-lg">
                <legend className="px-2 font-semibold flex items-center gap-2"><Users size={18} /> Winners</legend>
                <div className="grid md:grid-cols-3 gap-4 mt-2">
                  {[1, 2, 3].map(num => (
                    <div key={num} className="space-y-2 p-2 border-l-4 rounded-r-md" style={{ borderColor: num === 1 ? '#FBBF24' : num === 2 ? '#9CA3AF' : '#F97316' }}>
                      <label className="font-medium text-sm flex items-center gap-1">{num === 1 ? <Trophy size={16} /> : num === 2 ? <Medal size={16}/> : <Award size={16}/>} Winner {num}</label>
                      <input name={`winner${num}_name`} value={formData[`winner${num}_name` as keyof typeof formData]} onChange={handleInputChange} placeholder="Participant Name" className="w-full p-2 border rounded-md" required={num === 1} />
                      <input name={`winner${num}_team`} value={formData[`winner${num}_team` as keyof typeof formData]} onChange={handleInputChange} placeholder="Team Name (Optional)" className="w-full p-2 border rounded-md" />
                    </div>
                  ))}
                </div>
              </fieldset>

              <fieldset className="border p-4 rounded-lg">
                <legend className="px-2 font-semibold flex items-center gap-2"><Settings size={18} /> Design Customization</legend>
                <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mt-2">
                  <div>
                    <label className="text-sm font-medium">Title Font Size (px)</label>
                    <input type="number" name="title_font_size" value={formData.title_font_size} onChange={handleInputChange} className="w-full p-2 border rounded-md" />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Title Color</label>
                    <input type="color" name="title_color" value={formData.title_color} onChange={handleInputChange} className="w-full h-10 p-1 border rounded-md" />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Background Color</label>
                    <input type="color" name="background_color" value={formData.background_color} onChange={handleInputChange} className="w-full h-10 p-1 border rounded-md" />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Text Alignment</label>
                    <select name="text_alignment" value={formData.text_alignment} onChange={handleInputChange} className="w-full p-2 border rounded-md h-10">
                      <option value="left">Left</option>
                      <option value="center">Center</option>
                      <option value="right">Right</option>
                    </select>
                  </div>
                </div>
              </fieldset>

              <div className="flex justify-end gap-4 pt-4">
                <button type="button" onClick={resetForm} className="bg-gray-200 px-4 py-2 rounded-lg">Cancel</button>
                <button type="submit" disabled={isSubmitting} className="bg-brand-coral text-brand-dark-blue px-6 py-2 rounded-lg font-semibold disabled:opacity-50">
                  {isSubmitting ? <Loader2 className="animate-spin" /> : (editingPoster ? 'Update' : 'Create')}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminResults;
